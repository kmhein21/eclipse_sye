---
title: "Organizing and Visualizing Biological Audio Data from the 2024 Total Solar Eclipse"
author: "Kaitlin Heintzman"
format: 
  pdf:
    toc: true
---
```{r}
#| echo: false 
#| warning: false

library(tidyverse)
library(soundecology)
library(here)
library(hms)
library(tuneR)
library(pander)
```

## Abstract: 

## Data Collection Methods :

This protocol was written and carried out by Erika Barthelmess and other biology students at St. Lawrence university. 

We collected data between March 30 and April 16, 2024 by deploying 20 AudioMothTM acoustic recorders throughout St. Lawrence County, New York. All locations were fully within the path of totality for the April 8, 2024 total solar eclipse. The partial eclipse began at 14:11:38, totality began at 15:23:52, maximum eclipse was at 15:25:29, totality ended at 15:27:05 and the partial eclipse ended at 16:35:38 (all times local, times from https://www.timeanddate.com/eclipse/in/@5111484?iso=20240408) for a total eclipse duration of 2 hours 24 minutes with totality lasting 3 minutes and 13 seconds.

Each AudioMoth was configured to record within four temporal windows on each day of the deployment. The first window was from 05:45 – 07:15 (approximately 30 minutes before to 45 minutes after sunrise), the second from 14:00 to 16:50 (capturing the full period of time each day corresponding to the eclipse on April 8), third from 19:00 to 20:00 (approximately 30 minutes before and after sunset) and the last from 23:00 to 23:30 (to sample nocturnal sounds). (Table 1.)

| Times         | Reasoning                                        |
|---------------|--------------------------------------------------|
| 5:45 - 7:15   | 30-45 minutes before sunrise                     |
| 14:00 - 16:00 | full period of time corresponding to the eclipse |
| 19:00 - 20:00 | \~30 minutes before and after sunset             |
| 23:00 - 23:30 | sample nocturnal activity                        |

: Table 1 {.striped .hover}

Within each time window, each AudioMoth recorded in a repeated cycle with 55 seconds of recording and 5 seconds to write data for every minute of the recording window (Table 2). Sample rate measures the density of recordings per unit time and therefore the range of frequencies that can be recorded. High sample rates record a higher range of frequencies but take up more space on the microSD card. We selected a sample rate of 96 kHz to capture sound frequencies up to about 48 kHz, which allowed us to capture common bird and amphibian songs and calls as well as at least some insects and bat echolocation sounds. Gain is a measure of the degree to which the microphone amplifies the sound as it is recorded. Higher gain enables detection of quieter sounds but can also result in clipping and distortion. After collecting pilot recordings near wetlands where wood frogs were calling we determined that a gain setting of 4 would help increase our detection of animal sounds.

| Parameters         | Setting                                        |
|---------------|--------------------------------------------------|
| Sample rate (kHz)  | 96                    |
| Gain | Relatively high (4 on a 5 point scale) |
| Sleep Duration (seconds) | 5             |
| Recording Duration (seconds) | 55                     |

: Table 2 {.striped .hover}

We used ArcGIS Pro (version XXXX, ESRI Incorporated, Redlands, California) to identify areas of forest-wetland interface or forested wetland occurring on public or University-owned land. Our intention was to place the recorders at locations where they could capture the sounds of both forest birds and pond-breeding amphibians (as well as other biotic sounds including any active insects or bats). Due to our northern location within the path of the eclipse in North America, the onset of spring was just beginning. Red-winged blackbirds (Agelaius phoeniceus) had returned to the area and were establishing breeding territories and both wood frogs (Lithobates sylvaticus) and spring peepers (Pseudacris crucifer) had begun to chorus at least 5 days prior to deployment of the recorders. To reduce the time required to deploy units, we located the devices near but out of view of hiking trails and within 20 miles of the St. Lawrence University campus (44.58931027483651º N, -75.1613716006626 º W).

## Analysis

A large inspiration for this study and the protocol that we followed was due to a paper published in 2017 by Jacob E. Gerber, Dakota Howard, and John E. Quinn. 

### Indices and Packages

The analysis of this data uses many packages included "Tidyverse", "hms", "soundecology", "here", and "tuneR"

Using the $'soundecology'$ package we selected 5 specific indices of interest that we believed would be important in understanding the changes in acoustic activity. Due to the recording devices all data was subsetting from the left channel as the right channel values were not available. 

#### Acoustic Complexity Index:

This index focuses on understanding the spatial and temporal complexity of sound. It does so by numerically portraying the variation in sound signal over a time frame (the audio file). This index will reflect intensity and frequency shifts in an environment.

A higher ACI value indicates a more diversity soundscape compared to a lower value (could indicate more monotone and stable sounds).

In the Gerber et. al paper in 2017, this index was not found to be significant in their model but it was apparent that ACI was greatest during totality.

This index is obtained using the acoustic_complexity() function within the soundecology package. The specific numerical values used are from subsetting \$acl_left_vals.

#### Acoustic Diverstiy Index:

The Acoustic Diversity Index (ADI) assesses both the variety and evenness in the sound distribution across different bands. It does so by generating proportions of data within a specific interval that reach above a specified threshold (default -50dBFS).

Similar to ACI, a higher ADI value corresponds to a increase in diversity within a habitat and a low ADI refers to a less biodiverse location.

In the Gerber et. al paper in 2017, this index was not found to be significant in their model but it was apparent that ADI was highest at the times right before and after the eclipse.

This index is obtained using the acoustic_diversity() function in the soundecology package. The specific numerical values used are from subsetting \$left_band_values.

For both the Acoustic Diversity index and the Acoustic Complexity index multiple values are stored per .WAV audio file, in this analysis the list of values were often summed to produce the total ACI/ADI value which helped visualization and corresponded to the full audiofile. 

#### Acoustic Evenness Index:

The Acoustic Evenness Index (AEI) measures how even the distribution of sound is across different frequency bands. It does so by assessing the equality and inequality of sound power distribution in different ranges by calculating the Gini index over segmented portions of an audiofile. This index does not separate anthropogenic and biological sound. 

To understand interpretation, a high AEI value signifies a more even soundscape, within the audio there isn't any sound domination from one type of sound/species. A low AEI signifies that the sound is not as even, there may only be a few loud or similar sounds which disrupt the consistency of the sound level.

In the paper by Gerber et. al in 2017, this was found to be a statistically significant predictor in their model. There they found that the AEI was highest right before the eclipse began and it rose until period of totality. (Gerber attributes this likely to the increase in human sounds near their recording locations)

This index is found using the acoustic_evenness() function in the soundecology package. The specific numerical value used is from subsetting \$aei_left.

#### Bioacoustic Index:

The Bioacoustic Index (BEI) provides a measurement of the diversity and abundance of biological noise. This index is calculated in comparison to the period with the lowest sound, providing a look into the change in relation to levels of sound within the audiofile. 

Interpreation of this index can be understood as higher values signal higher sound disparities within the file, and vice versa for lower values. 

Within the Gerber et. al paper (2017), this was found to be a non-significant predictor but it seemed to be greatest at the period of totality. 

This is obtained using the bioacoustic_index() function in the soundecology package. The specific numerical value used is from subsetting \$left_area. In this function a minimum hertz value is set, and for this analysis we used the default of 2000 Hertz. 

#### Biophony:

Biophony is an index which calculates the average frequency of biotic sound. This index is much more straightforward as high biophony means that there is more sound and low values mean less.

Within the Gerber et. al paper in 2017, the biophony was found to increase at the beginning and end of the eclipse, akin to the dawn/dusk choruses. In this paper biophony was a significant predictor in their model. 

This index is obtained as a byproduct from the ndsi() function and the numerical values used is from subsetting \$biophony_left.

### Initial visualization 

Due to the large amount of recordings at our disposal we began creating graphics using a subset of 5 audio files (.WAV) from a single Audiomoth to explore the possibilities of the graphics and the best ways to display the indices, while not wasting computation time.

```{r}
#| echo: false 
WAV_5_test <-readRDS(here("WAV_5_test.rds"))
```

```{r}
#| echo: false

WAV_5_test|>
  mutate(ACI_all = sapply(ACI_all, function(x) paste(head(x,2), collapse = ",")))|>
  mutate(ADI_all = sapply(ADI_all, function(x) paste(head(x,2), collapse = ",")))|>
  select(-day, -hour, -folder_name)|>
  pander("First 5 Index values calculated")
```

```{r}
#| echo: false
#| fig-align: center

ggplot(data=WAV_5_test, aes(x=time, y=as.numeric(bei)))+
  geom_point(col="red")+
  theme_minimal()+
  labs(x = "Time", y = "BEI", title = "First Graphic of Bioacoustic Index")

ggplot(data=WAV_5_test, aes(x = time, y = as.numeric(aei)))+
  geom_point(col = "red")+
  theme_minimal()+
  labs(x = "Time", y = "AEI", title = "First Graphic of Acoustic Evenness")

ggplot(data = WAV_5_test, aes(x = time, y = as.numeric(biophony)))+
  geom_point(col = "red")+
  theme_minimal()+
  labs(x = "Time", y = "Biophony", title = "First Graphic of Biophony")

```


```{r}
#| echo: false
#| fig-align: center
ggplot(data = WAV_5_test, aes(x = time, y = sapply(ACI_all, sum)))+
  geom_point(col = "blue")+
  theme_minimal()+
  labs(x = "Time", y = "ACI", title = "First Graphic of Acoustic Complexity")

ggplot(data = WAV_5_test, aes(x = time, y = sapply(ADI_all, sum)))+
  geom_point(col = "blue")+
  theme_minimal()+
  labs(x = "Time", y = "ADI", title = "First Graphic of Acoustic Diversity")
```

The three first plots (points in red) are those which correspond to singular values, and the plots in blue correspond to the indices which are stored as list columns. As mentioned above, these values were summed across the full list. Although this initial introduction was not for the purpose of finding any patterns in our data, it displayed the ranges that we could expect these values to fall in. 

### Creating a cleaned data frame

To expand the collection of data that we could visualize it was best to generalize our code and create a function, "eclipse_df()" which would use a folder containing all .WAV files for one audiomoth as an input and then would return a cleaned data frame. This data frame would then be saved in our environment and would contain all the data that we would need from this point forward.  

Initially indexes are formed for all the WAV files and stored in their own data frames. For the Bioacoustic index, Acoustic eveness index, and biophony all values are subsetted from the original output of the soundecology function. These three indices are then bound into one tibble. 

```{r}
#| eval: false
BEI<-as.data.frame(BEI_ALL)|>
  select(starts_with("left_area"))|>
  pivot_longer(everything(), names_to= "bei_name", values_to = "BEI")
```

For the Acoustic Complexity and the Acoustic diversity to obtain the full list of values for each folder a for loop is incorporated into the function. This obtains all the left channel values and combines them into a list.

```{r}
#| eval: false

ACI_all<-vector("list", length(c(1:n)))
ADI_all<-vector("list", length(c(1:n)))

for (i in 1:n){
    ACI_all[i]<-(as.data.frame(ACI[[i]]$aci_fl_left_vals))
    ADI_all[i]<-(as.data.frame(ADI[[i]]$left_band_values))
} 
```

After they have been calculated the data frames are  bound together into one. The code listed below is for the final data frame which creates all our indices, date/time information, and the name of the folder that the data corresponds to. 

```{r}
#| eval: false
full|> mutate(biophony = as.numeric(biophony),
                        aei = as.numeric(aei),
                        bei = as.numeric(bei))|>
    separate(paths_date, into = c("date","time_hms"), sep = "_")|>
    separate(time_hms, into = c("time", "wav"), sep = "\\.")|>
    separate(time, into = c("hours", "other"), sep = 2)|>
    separate(other, into = c("min", "sec"), sep = 2)|>
    mutate(date = parse_number(date))|>
    unite("time", c("date", "hours", "min", "sec"), sep = ":")|>
    mutate(time= ymd_hms(time))|>
    select(-wav)|>
    mutate(folder_name = deparse(str_remove(folder, here())))|>
    select(folder_name, everything())
```

Initially we tested this function on two folders which are a part of the larger collection of data from the audiomoth A004_SD012. These two folders correspond to April 7th and 8th. Graphs from the indexes across the four different recording times are shown below

```{r}
#| echo: false 
#saveRDS(New_df_4_7, file = "A004_SD012_04_07.rds" )
#saveRDS(New_df_4_8, file = "A004_SD012_04_08.rds" )
New_df_4_7 <- readRDS(here("Old_rda_csv/A004_SD012_04_07.rds"))
New_df_4_8 <- readRDS(here("Old_rda_csv/A004_SD012_04_08.rds"))
```

```{r}
#| echo: false
both_days <- bind_rows(New_df_4_7, New_df_4_8) |>
  mutate(day = as.factor(day(time)),
         only_time = as_hms(time))

dawn<- both_days|> filter(only_time >= as_hms("05:45:00") & only_time <= as_hms("07:15:00"))
eclipse<- both_days|> filter(only_time >= as_hms("14:00:00") & only_time <= as_hms("16:00:00"))
afternoon<- both_days|> filter(only_time >= as_hms("19:00:00") & only_time <= as_hms("21:00:00"))
night<- both_days|> filter(only_time >= as_hms("23:00:00") & only_time <= as_hms("23:30:00"))
```

```{r}
#| echo: false

ggplot(data = dawn, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  geom_line()+
  geom_line(data = eclipse, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  geom_line(data = afternoon, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  geom_line(data = night, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  scale_color_viridis_d()+
  theme_minimal()+
  guides(color = guide_legend("Day"))+
  labs(title = "Biophony", x = "Time")


ggplot(data = dawn, aes(x = only_time, y = AEI, color = as.factor(date(time))))+
  geom_line()+
  geom_line(data = eclipse, aes(x = only_time, y = AEI, color = as.factor(date(time))))+
  geom_line(data = afternoon, aes(x = only_time, y = AEI, color = as.factor(date(time))))+
  geom_line(data = night, aes(x = only_time, y = AEI, color = as.factor(date(time))))+
  scale_color_viridis_d()+
  theme_minimal()+
  guides(color = guide_legend("Day"))+
  labs(title = "Biophony", x = "Time")

ggplot(data = dawn, aes(x = only_time, y = BEI, color = as.factor(date(time))))+
  geom_line()+
  geom_line(data = eclipse, aes(x = only_time, y = BEI, color = as.factor(date(time))))+
  geom_line(data = afternoon, aes(x = only_time, y = BEI, color = as.factor(date(time))))+
  geom_line(data = night, aes(x = only_time, y = BEI, color = as.factor(date(time))))+
  scale_color_viridis_d()+
  theme_minimal()+
  guides(color = guide_legend("Day"))+
  labs(title = "Biophony", x = "Time")

ggplot(data = dawn, aes(x = only_time, y = sapply(ADI, sum), color = as.factor(date(time))))+
  geom_line()+
  geom_line(data = eclipse, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  geom_line(data = afternoon, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  geom_line(data = night, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  scale_color_viridis_d()+
  theme_minimal()+
  guides(color = guide_legend("Day"))+
  labs(title = "Biophony", x = "Time")


ggplot(data = dawn, aes(x = only_time, y = sapply(ACI, sum), color = as.factor(date(time))))+
  geom_line()+
  geom_line(data = eclipse, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  geom_line(data = afternoon, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  geom_line(data = night, aes(x = only_time, y = Biophony, color = as.factor(date(time))))+
  scale_color_viridis_d()+
  theme_minimal()+
  guides(color = guide_legend("Day"))+
  labs(title = "Biophony", x = "Time")
```


Visualizing these two data sets help us understand the patterns that occur across a full day of recording as well, and a pattern we can see that across the day we can see that ADI, ACI, and biophony are higher during the dawn segment and then decrease to similar low levels across the rest of the day. Another thing these graphs can shed light on are the potential differences between a normal day and the day of the elipse. in these graphs we can see some differences between the indices, but as this is just a comparison from two folders we can't assume this is a result of the eclipse. 

### Using the HPC

To assist in efficiently expanding to the full set of our audio files, we decided to utilize the HPC to run our function on the large files for each audiomoth and to extract the cleaned data. This would assist in speeding up the computation time, and decreasing the amount of space utilized by WAV files on a desktop.  To avoid any chance of overwriting through this process, the function created a final output of an RDS file, so that it could be renamed as the audiomoth name upon loading into the environment. The total amount of data run on the HPC was 15 folders corresponding to 15 of the 20 audiomoths. 

Through using the HPC it was discovered that some of the audiomoth folders contained empty .WAV files which would kill the HPC job before the RDS was finished and saved. To combat this any folder which contained empty .WAV files, small .WAV files (<1 MB ), and alternate file types were deleted from the folder before running on the HPC. As this was only about ~5-8 files this did not cause concern about missing data or unequal RDS file sizes. 

### Analyzing one full file from an audiomoth

We began by running one folder corresponding to the first audiomoth (A001_SD001) on the HPC to assess the efficiency of our function, understand how the HPC would work, and begin our visualization of the full recording time. To analyze these full files we decided to focus on looking for patterns across the days that the audiomoths were recording. We wanted to see if the eclipse data looked different from the other days when sampling occurred and if the time during the eclipse was similar to the dawn. 

```{r}
#| echo: false
A001_SD001<-readRDS(here("rds_files/A001_SD001.rds"))

eclipse_start<-hms(00,00,14)
eclipse_end<-hms(00,50,16)

eclipse_time<-A001_SD001|> filter(hour>= eclipse_start & hour<= eclipse_end)
eclipseonly<-A001_SD001|> filter(hour>= eclipse_start & hour<= eclipse_end)|> filter(day == "2024-04-08")

dawn<- A001_SD001|> filter(hour >= as_hms("05:45:00") & hour <= as_hms("07:15:00"))
eclipse<- A001_SD001|> filter(hour >= as_hms("14:00:00") & hour <= as_hms("16:00:00"))
afternoon<- A001_SD001|> filter(hour >= as_hms("19:00:00") & hour <= as_hms("21:00:00"))
night<- A001_SD001|> filter(hour >= as_hms("23:00:00") & hour <= as_hms("23:30:00"))
```

Through analyzing the first folder and indices returned from one audiomoth (A001_SD001), we analyzed both the full time series and the time segment that corresponded to the eclipse. To display the patterns from different days we created faceted graphs. Through analyzing the full series, it seemed that day to day the indices fluctuated, and that there wasn't a specific difference between April 8th daily pattern and the other days. 

```{r}
#| echo: false
ggplot(data = A001_SD001, aes( x = as_hms(time), y = bei))+
  geom_line()+
  theme_minimal()+
  facet_wrap(~date(time))

ggplot(data = dawn, aes( x = hour, y = bei))+
  geom_line()+
  geom_line(data = eclipse, aes(x = hour, y = bei))+
  geom_line(data = afternoon, aes(x = hour, y = bei))+
  geom_line(data = night, aes(x = hour, y = bei))+
  theme_minimal()+
  facet_wrap(~day)
  
```

To look for more variations, we subsetted the portion of the day that corresponded to time of the eclipse and changed the color of the line corresponding to April 8th. In doing this we could see more variation and found an interesting pattern by looking at biophony.

```{r}
#| echo: false
ggplot(data = eclipse_time, aes(x = hour, y = biophony, group = day))+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hour, y = biophony), col = "blue", lwd = 1)+
  theme_minimal()+
  labs(title = "Biophony over Eclipse Duration")
```

Looking at the graph above we can see a decrease in the overall biological noise around the middle portion of the graph which would be during the time of the eclipse. The shaded portion during this increase shows that this decrease is not common to the time of day, and it is clear by looking at the rest of the daily pattern this varies. 

```{r}
ggplot(data = eclipse_time, aes(x = hour, y = biophony, group = day))+
  geom_rect(xmin =  hms(52,23,15), xmax = hms(05,27,15), ymin = 0, ymax = 3, fill = "lightblue", alpha = 0.3)+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hour, y = biophony), col = "blue", lwd = 1)+
  theme_minimal()+
  labs(title = "Biophony over Eclipse Duration")
```

To further understand why this pattern could be arising we added a rectangle corresponding to the time of totality (15:27:05 to 15:23:52). Once this is added we can see that this strong decrease occurs around the exact time totality begins. 

```{r}
#| echo: false
ggplot(data = eclipse_time, aes(x = hour, y = biophony))+
  geom_line()+
  geom_rect(xmin =  hms(52,23,15), xmax = hms(05,27,15), ymin = 0, ymax = 3, fill = "lightblue", alpha = 0.3)+
  facet_wrap(~day)+
  theme_minimal()+
  labs(title = "Biophony over the Eclipse Duration")
```

Creating this similar graph across all of the days we can see that this stark decrease in sound is not common and does not seem to occur in any day at this time, other than on April 8th. Although this is not a statistical conclusion, it is an interesting pattern worthy of notice. 

We preformed the same type of visualization across the other indices, however if there didn't seem to be any interesting patterns a faceted graph across all the days will not be included here. 

```{r}
#| echo: false
ggplot(data = eclipse_time, aes(x = hour, y = aei, group = day))+
  geom_rect(xmin =  hms(52,23,15), xmax = hms(05,27,15), ymin = 0, ymax = 3, fill = "green", alpha = 0.3)+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hour, y = aei), col = "blue", lwd =1)+
  theme_minimal()+
  labs(title = "Acoustic evenness over the Eclipse Duration")

```

In acoustic evenness this pattern is not as pronounced but there is an increase of AEI during the time of totality. Throughout this day we can see that this is the highest the AEI value gets, but comparitively to the other days it doesn't seem to stick out. 

```{r}
#| echo: false
ggplot(data = eclipse_time, aes(x = hour, y = bei, group = day))+
  geom_rect(xmin =  hms(52,23,15), xmax = hms(05,27,15), ymin = 0, ymax = 3, fill = "green", alpha = 0.3)+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hour, y = bei), col = "blue", lwd =1)+
  theme_minimal()+
  labs(title = "Bioacoustic Index over the Duration of the Eclipse")

```

In this graph we see another striking pattern, the BEI increasing significantly at the beginning of totality compared to the rest of this period. We can also see there are not a lot of days which have this high BEI at this time, or during this period of day. 

```{r}
#| echo: false
ggplot(data = eclipse_time, aes(x = hour, y = bei))+
  geom_rect(xmin =  hms(52,23,15), xmax = hms(05,27,15), ymin = 0, ymax = 3, fill = "lightblue", alpha = 0.3)+
  geom_line()+
  facet_wrap(~day)+
  theme_minimal()+
  labs(title = "Bioacoustic Index over the Eclipse Duration")
```

Faceting the graph we can get a better look at the patterns occurring at the times corresponding to totality on April 8th. From this we can see that this stark increase is not common across the other days, with the only other day where this pattern looks similar is on April 1st. Besides this one occurance, this pattern does not appear in any other day, and even on April 1st it is not as severe as the day of the eclipse. 

```{r}
#| echo: false
ggplot(data = eclipse_time, aes(x = hour, y = sapply(ACI_all, sum), group = day))+
  geom_rect(xmin =  hms(52,23,15), xmax = hms(05,27,15), ymin = 0, ymax = 3000, fill = "green", alpha = 0.3)+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hour, y = sapply(ACI_all,sum)), col = "blue", lwd =1)+
  theme_minimal()+
  labs(title = "Bioacoustic Index over the Duration of the Eclipse", y = "ACI")
```

For the ACI there seems to be the potentially for an interesting pattern, however we created a faceted graph we can see that the ACI is often at this 1600 level and is actually quite common across all the days. 

```{r}
#| echo: false
ggplot(data = eclipse_time, aes(x = hour, y = sapply(ACI_all, sum)))+
  geom_rect(xmin =  hms(52,23,15), xmax = hms(05,27,15), ymin = 0, ymax = 3000, fill = "lightblue", alpha = 0.3)+
  geom_line()+
  facet_wrap(~day)+
  theme_minimal()+
  labs(title = "Bioacoustic Index over the Eclipse Duration")
```

```{r}
#| echo: false
ggplot(data = eclipse_time, aes(x = hour, y = sapply(ADI_all, sum), group = day))+
  geom_rect(xmin =  hms(52,23,15), xmax = hms(05,27,15), ymin = 0, ymax = 12, fill = "green", alpha = 0.3)+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hour, y = sapply(ADI_all,sum)), col = "blue", lwd =1)+
  theme_minimal()+
  labs(title = "Bioacoustic Index over the Duration of the Eclipse", y = "ADI")
```

COMMENTS ON THIS PLOT 

```{r}
#| echo: false
ggplot(data = eclipse_time, aes(x = hour, y = sapply(ADI_all, sum)))+
  geom_rect(xmin =  hms(52,23,15), xmax = hms(05,27,15), ymin = 0, ymax = 3000, fill = "lightblue", alpha = 0.3)+
  geom_line()+
  facet_wrap(~day)+
  theme_minimal()+
  labs(title = "Bioacoustic Index over the Eclipse Duration")
```
KEEP PLOT ABOVE?

## Dawn to Eclipse comparison ?


## Full data visualization 

## Conclusion