---
title: "Write Up"
format: html
---

### Methods (Erika): 

We collected data between March 30 and April 16, 2024 by deploying 20 AudioMothTM acoustic recorders throughout St. Lawrence County, New York. All locations were fully within the path of totality for the April 8, 2024 total solar eclipse. The partial eclipse began at 14:11:38, totality began at 15:23:52, maximum eclipse was at 15:25:29, totality ended at 15:27:05 and the partial eclipse ended at 16:35:38 (all times local, times from https://www.timeanddate.com/eclipse/in/@5111484?iso=20240408) for a total eclipse duration of 2 hours 24 minutes with totality lasting 3 minutes and 13 seconds.  

Each AudioMoth was configured to record within four temporal windows on each day of the deployment. The first window was from 05:45 – 07:15 (approximately 30 minutes before to 45 minutes after sunrise), the second from 14:00 to 16:50 (capturing the full period of time each day corresponding to the eclipse on April 8),  third from 19:00 to 20:00 (approximately 30 minutes before and after sunset) and the last from 23:00 to 23:30 (to sample nocturnal sounds). (Table 1.)

#### Table 1. 

```{r}
library(pander)
Times<- c("05:45 - 07:15", "14:00 - 16:50", "19:00- 20:00", "23:00 - 23:30")

Reasoning<- c("30-45 minutes before sunrise", "full period of time corresponding to the eclipse", "~30 minutes before and after sunset", "sample nocturnal activity")

Table1<-cbind(Times, Reasoning)
Table1|>pander()
```


Within each time window, each AudioMoth recorded in a repeated cycle with 55 seconds of recording and 5 seconds to write data for every minute of the recording window (Table 2). Sample rate measures the density of recordings per unit time and therefore the range of frequencies that can be recorded. High sample rates record a higher range of frequencies but take up more space on the microSD card. We selected a sample rate of 96 kHz to capture sound frequencies up to about 48 kHz, which allowed us to capture common bird and amphibian songs and calls as well as at least some insects and bat echolocation sounds. Gain is a measure of the degree to which the microphone amplifies the sound as it is recorded. Higher gain enables detection of quieter sounds but can also result in clipping and distortion. After collecting pilot recordings near wetlands where wood frogs were calling we determined that a gain setting of 4 would help increase our detection of animal sounds. 

#### Table 2. 

```{r}
Parameters<- c("Sample Rate (kHz)", "Gain", "Sleep duration (seconds)", "Recording duration (seconds)")

Setting<-c("96", "Relatively high (4 on a 5 point scale)", "5", "55")

Table2<-cbind(Parameters, Setting)
Table2|> pander()
```



We used ArcGIS Pro (version XXXX, ESRI Incorporated, Redlands, California) to identify areas of forest-wetland interface or forested wetland occurring on public or University-owned land. Our intention was to place the recorders at locations where they could capture the sounds of both forest birds and pond-breeding amphibians (as well as other biotic sounds including any active insects or bats). Due to our northern location within the path of the eclipse in North America, the onset of spring was just beginning. Red-winged blackbirds (Agelaius phoeniceus) had returned to the area and were establishing breeding territories and both wood frogs (Lithobates sylvaticus) and spring peepers (Pseudacris crucifer) had begun to chorus at least 5 days prior to deployment of the recorders. To reduce the time required to deploy units, we located the devices near but out of view of hiking trails and within 20 miles of the St. Lawrence University campus (44.58931027483651º N, -75.1613716006626 º W). 


### Analysis

#### Indices and Packages

The analysis of this data uses many packages included "Tidyverse", "hms", "soundecology", "here", and "tuneR"

Using the $'soundecology'$ package we selected 5 specific indices of interest that we believed would be important in understanding the changes in acoustic activity. For all the functions used values were obtained from the left channel of the recorder, as the "right channel values" were not available, likely due to the recording device itself.

Acoustic Evenness Index:

Index which measures the equality and inequality of sound power distribution in different ranges. This index uses the Gini index of evenness. This index is found using the acoustic_evenness() function in the soundecology package. The specific numerical value used is from subsetting $aei_left. 

Bioacoustic Evenness Index:

Index is a function of the power and freqeuncy range of biotic sound. This is obtained using the bioacoustic_evenness() function in the soundecology package. The specific numerical value used is from subsetting $left_area.  

Biophony: 

Index which calculates the average frequency of biotic sound. This index is obtained as a byproduct from the ndsi() function and the numerical values used is from subsetting $biophony_left. 

Acoustic Diverstiy Index:

Index which generates proportions of data within a specific interval that reach above a specified threshold (default -50dBFS). This index is obtained using the acoustic_diversity() function in the soundecology package. The specific numerical values used are from subsetting $left_band_values. 

Acoustic Complexity Index:

Index is a function of the amount of variation within frequency bins of a sample. This index is obtained using the acoustic_complexity() function within the soundecology package. The specific numerical values used are from subsetting $acl_left_vals.  

For both the Acoustic Diversity index and the Acoustic Complexity index multiple values are stored per .WAV audio file, in this analysis this list of values can be visualized across the sample and therefore specific intervals of time or these values can be summed to produce the "total" ACI/ADI respectively, which corresponds to the whole audio file. 

#### Creating a cleaned data frame 

The initial goal was to create a data frame that contained all of the information that we would like to assess from each of our audio files. This would allow us to visualize the indices in graphics, allowing us to look for patterns across time. Due to the large amount of recordings at our disposal we began using a subset of 5 audio files (.WAV) explore the possibilities of the graphics and the best ways to display the indices, while not wasting computation time.  Examples of some of the initial graphs for Bioacoustic evenness, Biophony, and Acoustic evenness are displayed below: 

```{r}
ggplot(data=WAV_5_test, aes(x=time, y=as.numeric(bei)))+
  geom_line(col="orange")+
  theme_minimal()+
  labs(x = "Time", y = "Bioacoustic Evenness")

ggplot(data=WAV_5_test, aes(x = time, y = as.numeric(aei)))+
  geom_line()+
  theme_minimal()+
  labs(x = "Time", y = "Acoustic Evenness")

ggplot(data = WAV_5_test, aes(x = time, y = as.numeric(biophony)))+
  geom_line(col = "green")+
  theme_minimal()+
  labs(x = "Time", y = "Biophony")

```

Although this initial introduction failed to show any patterns from the data, it gave us examples of the ranges that these values followed, as well as helped with testing the code that was written so far. The above graphics correspond to the indices which are "singular", with just one value per WAV file. The indices that are contained in a "list" format (Acoustic Complexity and Acoustic Diversity), were displayed in a different way (below).

*GRAPHICS FOR ACI AND ADI WITH INITIAL 5

The next step was to expand our code to create a function $eclipse_df()$ that could be used on a folder containing all of the .WAV files for one audiomoth. This function would return a cleaned data frame which could be saved in the environment and therefore containing all of the information we need without taking up too much space. The code for the final data frame is listed below, this leads to a data frame which contains all of our indices, date/time information, and a column with the folder name. 
 

```{r}
full|> mutate(biophony = as.numeric(biophony),
                        aei = as.numeric(aei),
                        bei = as.numeric(bei))|>
    separate(paths_date, into = c("date","time_hms"), sep = "_")|>
    separate(time_hms, into = c("time", "wav"), sep = "\\.")|>
    separate(time, into = c("hours", "other"), sep = 2)|>
    separate(other, into = c("min", "sec"), sep = 2)|>
    mutate(date = parse_number(date))|>
    unite("time", c("date", "hours", "min", "sec"), sep = ":")|>
    mutate(time= ymd_hms(time))|>
    select(-wav)|>
    mutate(folder_name = deparse(str_remove(folder, here())))|>
    select(folder_name, everything())
```
 
Initially this function was used on two folders of audiomoths from April 7th and 8th.

```{r}
New_df_4_7
New_df_4_8

both_days <- bind_rows(New_df_4_7, New_df_4_8) |>
  mutate(day = as.factor(lubridate::day(time)),
         only_time = hms::as_hms(time))

ggplot(data = both_days, aes(x = as_hms(time), y = Biophony, color = as.factor(date(time))))+
  geom_line()+
  scale_color_viridis_d()+
  theme_minimal()+
  labs(title = "Biophony")

ggplot(data = both_days, aes(x = as_hms(time), y = AEI, color = as.factor(date(time))))+
  geom_line()+
  scale_color_viridis_d()+
  theme_minimal()+
  labs(title = "Acoustic Evenness")

ggplot(data = both_days, aes(x = as_hms(time), y = BEI, color = as.factor(date(time))))+
  geom_line()+
  scale_color_viridis_d()+
  theme_minimal()+
  labs(title = "Bioacoustic Evenness")
```

*ADD GRAPHICS FOR ACI AND ADI

Visualizing these two data sets was beneficial in understanding the patterns across a full day of recording and the potential for differences between two days, specifically between a normal day and the day of the eclipse. Although just a comparison between two days we can see variation in the patterns for all the indices above, yet it remains unknown whether this is a random sound variation in sound or whether the eclipse played a role in these changes. Having produced these two data frames, we then started to question how we would obtain all of the data for each of our WAV files. 

#### Using the HPC 

To assist in efficiently expanding to the full set of our audio files, we decided to utilize an HPC to run our function on the large files for each audiomoth, returning our desired data frame, and decreasing the amount of space utilized by WAV files on our desktops. To avoid any chance of overwriting through this process, the function was altered to change the final output from an RDA to an RDS file, so that it could be renamed upon loading into the environment. 

The analysis consisted of first looking for patterns across the days of the audiomoths to see if the eclipse data looked different from the other days when sampling occurred and if the time during the eclipse was similar to other times of the day. We began by running one folder corresponding to one audiomoth on the HPC to assess the efficiency of our function,  understand how the HPC would work, and begin our visualization of the full recording time. 

#### Analyzing one full file from an audiomoth

Through analyzing the first folder and indices returned from one audiomoth (A001_SD001), we analyzed both the full time series and the time segment that corresponded to the eclipse. Through analyzing the full series, it didn't seem that there was anything sticking out immensely. To display the patterns from different days we created faceted graphs. One downside to these graphics is the continuity between points where there was not active recording, this leads to stagnant lines which distract from the overall image. 

```{r}
ggplot(data = A001_SD001, aes( x = as_hms(time), y = bei))+
  geom_line()+
  theme_minimal()+
  facet_wrap(~date(time))
```

Subsetting the time series to the period that corresponded to the eclipse on April 8th showed a few interesting patterns, specifically in biophony analysis. 

```{r}
ggplot(data = eclipse_time, aes(x = hours, y = biophony, group = day))+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hours, y = biophony), col = "red", lwd = 1)+
  theme_minimal()+
  labs(title = "Biophony over Eclipse Duration")
```

Looking at the graph above we can see a decrease in the overall biological noise around what seems to be the time of the eclipse. The lightly shaded background shows that this is not a normal pattern across other days, and it is clear by looking at the red line that this portion varies from the rest of that day. 

```{r}
ggplot(data = eclipse_time, aes(x = hours, y = biophony, group = day))+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hours, y = biophony), col = "red", lwd = 1)+
  theme_minimal()+
  geom_vline(xintercept = hms(52,23,15), color= "blue", linetype = "dashed")+
  labs(title = "Biophony over Eclipse Duration")
```

By adding a vertical line that corresponds to the beginning of totality (TIME), we can add to the observation above by showing that this decrease in biological sound is extremely close to the beginning of totality. 

```{r}
ggplot(data = eclipse_time, aes(x = hours, y = biophony))+
  geom_line()+
  geom_vline(xintercept = hms(52,23,15), color = "blue", linetype = "dashed")+
  facet_wrap(~day)+
  theme_minimal()+
  labs(title = "Biophony over the Eclipse Duration")
```

Looking across all the days separately we can see that this stark decrease in sound is not common and does not seem to occur in any day at this time, other than on April 8th.  

Preforming a similar type of analysis to Acoustic evenness and Bioacoustic evenness returns the following:
```{r}
ggplot(data = eclipse_time, aes(x = hours, y = aei, group = day))+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hours, y = aei), col = "red", lwd =1)+
  geom_vline(xintercept = hms(53,23,15), color = "darkred", linetype = "dashed")+
  theme_minimal()+
  labs(title = "Acoustic evenness over the Eclipse Duration")

```

```{r}
ggplot(data = eclipse_time, aes(x = hours, y = bei, group = day))+
  geom_line(alpha = 0.3)+
  geom_line(data = eclipseonly, aes(x = hours, y = bei), col = "blue", lwd = 1)+
  geom_vline(xintercept = hms(53,23,15), color = "darkred", linetype = "dashed")+
  theme_minimal()+
  labs(title = "Bioacoustic evenness over the Duration of the Eclipse")

```

In these graphs we can see that again there is a change in the indices from the regular pattern at the time of totality, although this pattern is slightly less convincing in the Acoustic evenness index. In the Bioacoustic evenness visual, the time of totality causes a massive increase compared to the rest of that time segment. 

Another point of interest during this analysis is this difference in indices between the duration of the eclipse and at dawn. 













